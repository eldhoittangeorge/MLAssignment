size = dim(testData)
trainSample = sample(size[1],size = as.integer(size[1]*.9))
print(trainSample)
trainData <- trainData[trainSample]
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
table(trainData$Label)/nrow(trainData)
table(testData$Label)/nrow(trainData)
testData <- trainData[-trainSample,]
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
table(trainData$Label)/nrow(trainData)
table(testData$Label)/nrow(trainData)
table(testData$Label)/nrow(testData)
table(trainData$Label)/nrow(trainData)
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
table(trainData$Label)/nrow(trainData)
table(testData$Label)/nrow(testData)
prop.table(trainData$Label)
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
#For Random forrest
trainData$Label <- as.factor(trainData$Label)
randomForestModel <- randomForest(Label ~ .,trainData,importance = T)
trainData$Albumin_and_Globulin_Ratio <- ifelse(is.na(trainData$Albumin_and_Globulin_Ratio)
,mean(trainData$Albumin_and_Globulin_Ratio,na.rm = T),
trainData$Albumin_and_Globulin_Ratio)
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
#For Random forrest
trainData$Label <- as.factor(trainData$Label)
prop.table(table(testData$Label))
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
head(trainData)
as.integer(size[1]*.9)
size[1]
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
prop.table(table(testData$Label))
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
trainSample = sample(size[1],size = as.integer(size[1]*.9))
trainData$Albumin_and_Globulin_Ratio <- ifelse(is.na(trainData$Albumin_and_Globulin_Ratio)
,mean(trainData$Albumin_and_Globulin_Ratio,na.rm = T),
trainData$Albumin_and_Globulin_Ratio)
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
#For Random forrest
trainData$Label <- as.factor(trainData$Label)
randomForestModel <- randomForest(Label ~ .,trainData,importance = T)
head(trainData)
trainData <- read.csv("indian_liver_patient.csv",header = T)
size = dim(testData)
trainSample = sample(size[1],size = as.integer(size[1]*.9))
head(trainData)
summary(trainData)
summary(testData)
dim(testData)
dim(trainData)
head(trainData)
trainData <- read.csv("indian_liver_patient.csv",header = T)
size = dim(testData)
trainSample = sample(size[1],size = as.integer(size[1]*.9))
head(trainData)
summary(trainData)
dim(trainData)
trainData$Albumin_and_Globulin_Ratio <- ifelse(is.na(trainData$Albumin_and_Globulin_Ratio)
,mean(trainData$Albumin_and_Globulin_Ratio,na.rm = T),
trainData$Albumin_and_Globulin_Ratio)
summary(trainData)
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
summary(trainData)
trainData <- read.csv("indian_liver_patient.csv",header = T)
size = dim(testData)
trainSample = sample(size[1],as.integer(size[1]*.9))
head(trainData)
summary(trainData)
dim(trainData)
trainData$Albumin_and_Globulin_Ratio <- ifelse(is.na(trainData$Albumin_and_Globulin_Ratio)
,mean(trainData$Albumin_and_Globulin_Ratio,na.rm = T),
trainData$Albumin_and_Globulin_Ratio)
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
library(randomForest)
library(ggplot2)
trainData <- read.csv("indian_liver_patient.csv",header = T)
size = dim(testData)
trainSample = sample(size[1],size = as.integer(size[1]*.9))
head(trainData)
summary(trainData)
dim(trainData)
trainData$Albumin_and_Globulin_Ratio <- ifelse(is.na(trainData$Albumin_and_Globulin_Ratio)
,mean(trainData$Albumin_and_Globulin_Ratio,na.rm = T),
trainData$Albumin_and_Globulin_Ratio)
trainData <- trainData[trainSample,]
testData <- trainData[-trainSample,]
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
print(table(trainData$Label))
di <-(table(trainData$Label))
print(di)
proc.table(table(trainData$Label))
prop.table(table(trainData$Label))
prop.table(table(testData$Label))
table(trainData$Label)/nrow(trainData)
data <- read.csv("indian_liver_patient.csv",header = T)
summary(data)
#Removing NA's in Albumin_and_Globulin_Ratio
data$Albumin_and_Globulin_Ratio <- ifelse(is.na(data$Albumin_and_Globulin_Ratio),
mean(data$Albumin_and_Globulin_Ratio),
data$Albumin_and_Globulin_Ratio)
summary(data)
#Removing NA's in Albumin_and_Globulin_Ratio
data$Albumin_and_Globulin_Ratio <- ifelse(!is.na(data$Albumin_and_Globulin_Ratio),
mean(data$Albumin_and_Globulin_Ratio),
data$Albumin_and_Globulin_Ratio)
summary(data)
data <- read.csv("indian_liver_patient.csv",header = T)
summary(data)
#Removing NA's in Albumin_and_Globulin_Ratio
data$Albumin_and_Globulin_Ratio <- ifelse(is.na(data$Albumin_and_Globulin_Ratio),
mean(data$Albumin_and_Globulin_Ratio),
data$Albumin_and_Globulin_Ratio)
summary(data)
#Removing NA's in Albumin_and_Globulin_Ratio
data$Albumin_and_Globulin_Ratio <- ifelse(is.na(data$Albumin_and_Globulin_Ratio),
mean(data$Albumin_and_Globulin_Ratio,na.rm = T),
data$Albumin_and_Globulin_Ratio)
summary(data)
#Plotting data to see outliers
boxplot(data$Total_Bilirubin)
print(sort(data$Total_Bilirubin))
print(sort(data))
boxplot(data$Direct_Bilirubin)
boxplot(data$Alkaline_Phosphotase)
ifelse(data$Total_Bilirubin == max(data$Total_Bilirubin),print(data),)
ifelse(data$Total_Bilirubin == max(data$Total_Bilirubin),print(data),print(""))
data[max(data$Total_Bilirubin)]
data[max(data$Total_Bilirubin),]
data[which.max(data$Total_Bilirubin),]
boxplot(data$Direct_Bilirubin)
replace(data,which.max(data$Total_Bilirubin),)
data[-which.max(data$Total_Bilirubin),]
summary(data)
data <- read.csv("indian_liver_patient.csv",header = T)
summary(data)
#Removing NA's in Albumin_and_Globulin_Ratio
data$Albumin_and_Globulin_Ratio <- ifelse(is.na(data$Albumin_and_Globulin_Ratio),
mean(data$Albumin_and_Globulin_Ratio,na.rm = T),
data$Albumin_and_Globulin_Ratio)
#Plotting data to see outliers
boxplot(data$Total_Bilirubin)
boxplot(data$Direct_Bilirubin)
data <- data[-which.max(data$Total_Bilirubin),]
summary(data)
#Plotting data to see outliers
boxplot(data$Total_Bilirubin)
boxplot(data$Alkaline_Phosphotase)
boxplot(data$Alamine_Aminotransferase)
boxplot(data$Aspartate_Aminotransferase)
data <- data[-which.max(data$Aspartate_Aminotransferase)]
boxplot(data$Total_Protiens)
boxplot(data$Total_Protiens)
boxplot(data$Albumin_and_Globulin_Ratio)
boxplot(data$Albumin)
table(data$Label)
table(data$Label)/nrow(data)
library(caret)
trainIndex <- createDataPartition(data$Label,p = .9,list = F,times = 1)
trainData <- data[trainIndex,]
testData <- data[-trainIndex,]
#Checking the distribution of data
table(trainData$Label)/nrow(trainData)
nrow(trainData)
nrow(data)
table(testData$Label)/nrow(testData)
#Checking the distribution of data
set.seed(2000)
trainIndex <- createDataPartition(data$Label,p = .9,list = F,times = 1)
trainData <- data[trainIndex,]
testData <- data[-trainIndex,]
table(trainData$Label)/nrow(trainData)
table(testData$Label)/nrow(testData)
#Checking the distribution of data
set.seed(3000)
trainIndex <- createDataPartition(data$Label,p = .9,list = F,times = 1)
trainData <- data[trainIndex,]
testData <- data[-trainIndex,]
table(trainData$Label)/nrow(trainData)
table(testData$Label)/nrow(testData)
trainIndex <- createDataPartition(data$Label,p = .9,list = F,times = 1)
trainData <- data[trainIndex,]
testData <- data[-trainIndex,]
table(trainData$Label)/nrow(trainData)
table(testData$Label)/nrow(testData)
class(data)
class(data$Label)
data <- read.csv("indian_liver_patient.csv",header = T)
summary(data)
data$Label <- as.factor(data$Label)
#Removing NA's in Albumin_and_Globulin_Ratio
data$Albumin_and_Globulin_Ratio <- ifelse(is.na(data$Albumin_and_Globulin_Ratio),
mean(data$Albumin_and_Globulin_Ratio,na.rm = T),
data$Albumin_and_Globulin_Ratio)
#Plotting data to see outliers
boxplot(data$Total_Bilirubin)
#Removing some outlier data
data <- data[-which.max(data$Total_Bilirubin),]
data <- data[-which.max(data$Aspartate_Aminotransferase)]
#Checking the distribution of data
set.seed(3000)
trainIndex <- createDataPartition(data$Label,p = .9,list = F,times = 1)
trainData <- data[trainIndex,]
testData <- data[-trainIndex,]
table(trainData$Label)/nrow(trainData)
table(testData$Label)/nrow(testData)
randomForestModel <- randomForest(trainData$Label ~ .,trainData,importance = T)
print(randomForest())
randomForestModel
plot(randomForestModel)
randomForestModel <- randomForest(data$Label ~ .,data,importance = T)
plot(randomForestModel)
importance(randomForestModel)
importance(randomForestModel,type = 2)
varImpPlot(randomForestModel)
importantVar <-  importance(randomForestModel,type = 2)
print(importantVar)
importantVar <-  order(importance(randomForestModel,type = 2))
print(importantVar)
importantVar <-  order(importance(randomForestModel,type = 2),decreasing = F)
print(importantVar)
importantVar <-  order(importance(randomForestModel,type = 2),decreasing = T)
print(importantVar)
importantVar <-  importantVar[order(importance(randomForestModel,type = 2),decreasing = T)]
print(importantVar)
importantVar <- data.frame(importance(randomForestModel,type = 2))
print(importantVar)
importantVar <- importantVar[order(importantVar,decreasing = T)]
importantVar <- importantVar[order(importantVar,decreasing = T),]
print(importantVar)
importantVar <- data.frame(importance(randomForestModel,type = 2))
print(importantVar)
print(importantVar[1])
print(importantVar[1,])
print(importantVar[,1])
print(importantVar[1,1])
importantVar <- order(importantVar,decreasing = T)
print(importantVar[1,1])
print(importantVar[1,])
print(importantVar)
importantVar <- data.frame(importance(randomForestModel,type = 2))
importantVari <- order(importantVar,decreasing = T)
print(importantVar)
print(importantVar[i,])
print(importantVar[importantVari,])
print(importantVar)
importantVar <- data.frame(importance(randomForestModel,type = 2))
print(importantVar)
importantVar$Name <- row.names(importantVar)
print(importantVar)
importantVar$MeanDecreaseGini <- order(importantVar,decreasing = T)
importantVar[order(importantVar$MeanDecreaseGini,decreasing = T)]
importantVar <- data.frame(importance(randomForestModel,type = 2))
importantVar$Name <- row.names(importantVar)
importantVar[order(importantVar$MeanDecreaseGini,decreasing = T)]
importantVar[order(importantVar$MeanDecreaseGini,decreasing = T),]
print(importantVar)
importantVar <- importantVar[order(importantVar$MeanDecreaseGini,decreasing = T),]
print(importantVar)
head(importantVar,n=3)
#Random Forrest
randomForestMain <- randomForest(trainData$Label ~ .,trainData,importance = T)
#Random Forrest
randomForestModelMain <- randomForest(trainData$Label ~ .,trainData,importance = T)
print(testData[-10])
print(testData[,-10])
print(testData[,-10])
data <- read.csv("indian_liver_patient.csv",header = T)
summary(data)
data$Label <- as.factor(data$Label)
#Removing NA's in Albumin_and_Globulin_Ratio
data$Albumin_and_Globulin_Ratio <- ifelse(is.na(data$Albumin_and_Globulin_Ratio),
mean(data$Albumin_and_Globulin_Ratio,na.rm = T),
data$Albumin_and_Globulin_Ratio)
#Removing some outlier data
data <- data[-which.max(data$Total_Bilirubin),]
data <- data[-which.max(data$Aspartate_Aminotransferase)]
#Checking the distribution of data
set.seed(3000)
#Creating training and testing data
trainIndex <- createDataPartition(data$Label,p = .9,list = F,times = 1)
trainData <- data[trainIndex,]
testData <- data[-trainIndex,]
table(trainData$Label)/nrow(trainData)
table(testData$Label)/nrow(testData)
#table(testData$Label)/
nrow(testData)
#Random Forrest
randomForestModelMain <- randomForest(trainData$Label ~ .,trainData,importance = T)
print(testData[,-10])
testData$Predict <- Predict(randomForestModelMain,testData)
testData$Predict <- predict(randomForestModelMain,testData)
testData
confusionMatrix(data = testData$Predict,reference = testData$Label,positive = "yes")
confusionMatrix(data = testData$Predict,reference = testData$Label)
#Decision Tree
decisionTreeModel <- C5.0(trainData,trainData$Label)
library(C50)
#Decision Tree
decisionTreeModel <- C5.0(trainData,trainData$Label)
print(decisionTreeModel)
#Decision Tree
summary(testData)
data <- read.csv("indian_liver_patient.csv",header = T)
data$Label <- as.factor(data$Label)
#Removing NA's in Albumin_and_Globulin_Ratio
data$Albumin_and_Globulin_Ratio <- ifelse(is.na(data$Albumin_and_Globulin_Ratio),
mean(data$Albumin_and_Globulin_Ratio,na.rm = T),
data$Albumin_and_Globulin_Ratio)
#Removing some outlier data
data <- data[-which.max(data$Total_Bilirubin),]
data <- data[-which.max(data$Aspartate_Aminotransferase)]
#Checking the distribution of data
set.seed(3000)
table(trainData$Label)/nrow(trainData)
table(testData$Label)/nrow(testData)
#Creating training and testing data
trainIndex <- createDataPartition(data$Label,p = .9,list = F,times = 1)
trainData <- data[trainIndex,]
testData <- data[-trainIndex,]
decisionTreeModel <- C5.0(trainData,trainData$Label)
print(decisionTreeModel)
summary(decisionTreeModel)
#Decision Tree
summary(testData)
summart(testData[1:10,])
summary(testData[1:10,])
summary(testData[,1:10])
summary(testData[,-10])
summary(testData[,1:10])
dtPrediction <- predict(decisionTreeModel,testData[,1:10])
summary(testData[,1:10])
decisionTreeModel <- C5.0(trainData,trainData$Label)
summary(decisionTreeModel)
dtPrediction <- predict(decisionTreeModel,testData[,1:10])
dtPrediction <- predict(decisionTreeModel,testData)
decisionTreeModel <- C5.0(trainData,trainData$Label)
summary(decisionTreeModel)
dtPrediction <- predict(decisionTreeModel,testData[,1:10])
library(C50)
decisionTreeModel <- C5.0(trainData[-10],trainData$Label)
summary(decisionTreeModel)
decisionTreeModel$rules
dtPrediction <- predict(decisionTreeModel,testData)
library(gmodels)
CrossTable(testData$Label,dtPrediction)
data <- read.csv("indian_liver_patient.csv",header = T)
library(gbm)
#Gradient Boost
gbModel <- gbm(formula = trainData$Label ~ .,data = trainData,distribution = "bernoulli")
data <- read.csv("indian_liver_patient.csv",header = T)
summary(data)
#Removing NA's in Albumin_and_Globulin_Ratio
data$Albumin_and_Globulin_Ratio <- ifelse(is.na(data$Albumin_and_Globulin_Ratio),
mean(data$Albumin_and_Globulin_Ratio,na.rm = T),
data$Albumin_and_Globulin_Ratio)
#Removing some outlier data
data <- data[-which.max(data$Total_Bilirubin),]
data <- data[-which.max(data$Aspartate_Aminotransferase)]
#Checking the distribution of data
set.seed(3000)
table(trainData$Label)/nrow(trainData)
table(testData$Label)/nrow(testData)
#Creating training and testing data
trainIndex <- createDataPartition(data$Label,p = .9,list = F,times = 1)
trainData <- data[trainIndex,]
testData <- data[-trainIndex,]
#Gradient Boost
gbModel <- gbm(formula = trainData$Label ~ .,data = trainData,distribution = "bernoulli")
#Getting data ready
trainData$Label <- ifelse(trainData$Label == 1,0,2)
gbModel <- gbm(formula = trainData$Label ~ .,data = trainData,distribution = "bernoulli")
#Getting data ready
trainData$Label <- ifelse(trainData$Label == 1,0,1)
gbModel <- gbm(formula = trainData$Label ~ .,data = trainData,distribution = "bernoulli")
summary(gbModel)
gbModel <- gbm(formula = trainData$Label ~ .,data = trainData,distribution = "bernoulli",
n.trees = 70,
interaction.depth = 5,
shrinkage = 0.3,
train.fraction = 1.0,
n.cores = NULL)
summary(gbModel)
gbModel <- gbm(formula = trainData$Label ~ .,data = trainData,distribution = "bernoulli",
n.trees = 70)
summary(gbModel)
str(trainData)
trainData$Gender <- ifelse(trainData$Gender == "Male",0,1)
gbModel <- gbm(formula = trainData$Label ~ .,data = trainData,distribution = "bernoulli",
n.trees = 70)
summary(gbModel)
class(trainData)
str(trainData)
gbModel <- gbm(formula = trainData$Label ~ .,data = trainData,distribution = "bernoulli",
n.trees = 70)
summary(gbModel)
gbModel
print(gbModel)
gbModel <- gbm(formula = trainData$Label ~ .,data = trainData,distribution = "bernoulli"
)
print(gbModel)
library(randomForest)
library(ggplot2)
library(caret)
library(C50)
library(gmodels)
library(gbm)
data <- read.csv("indian_liver_patient.csv",header = T)
summary(data)
#Removing NA's in Albumin_and_Globulin_Ratio
data$Albumin_and_Globulin_Ratio <- ifelse(is.na(data$Albumin_and_Globulin_Ratio),
mean(data$Albumin_and_Globulin_Ratio,na.rm = T),
data$Albumin_and_Globulin_Ratio)
#Removing some outlier data
data <- data[-which.max(data$Total_Bilirubin),]
data <- data[-which.max(data$Aspartate_Aminotransferase)]
#Checking the distribution of data
set.seed(3000)
table(trainData$Label)/nrow(trainData)
table(testData$Label)/nrow(testData)
#Creating training and testing data
trainIndex <- createDataPartition(data$Label,p = .9,list = F,times = 1)
trainData <- data[trainIndex,]
testData <- data[-trainIndex,]
#Getting data ready
trainData$Label <- ifelse(trainData$Label == 1,0,1)
trainData$Gender <- ifelse(trainData$Gender == "Male",0,1)
str(trainData)
gbModel <- gbm(formula = trainData$Label ~ .,data = trainData,distribution = "bernoulli"
)
print(gbModel)
gbModel
plot(gbModel)
